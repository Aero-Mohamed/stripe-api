name: StripeAPI
on:
  push:
    branches:
      - main
      - develop
      - features/**

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    # Service container Mysql mysql
    services:
      redis:
        image: redis:latest
        env:
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
        ports:
          - 6379:6379
      # Label used to access the service container
      mysql:
        # Docker Hub image (also with version)
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE:  stripe_api
        ## map the "external" 33306 port with the "internal" 3306
        ports:
          - 33306:3306
        # Set health checks to wait until mysql database has started (it takes some seconds to start)
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: [ '8.3']
        dependency-stability: [ 'prefer-none' ]

        laravel: [ '11.*' ]
        include:
          - laravel:  11.*
            testbench: 9.*


    name: P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}

    steps:
      - uses: actions/checkout@v4
      - name: "Install php-pcov for Coverage Test"
        run: sudo apt-get install php-pcov -y
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      - name: Get Composer Cache Directory 2
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        id: actions-cache
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Cache PHP dependencies
        uses: actions/cache@v4
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Laravel Dependencies
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Update Dependencies with latest stable
        if: matrix.dependency-stability == 'prefer-stable'
        run: composer update --prefer-stable
      - name: Update Dependencies with lowest stable
        if: matrix.dependency-stability == 'prefer-lowest'
        run: composer update --prefer-stable --prefer-lowest
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Run Migrations
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: stripe_api
          DB_PORT: 33306
          DB_USER: root
          DB_PASSWORD: password

        run: php artisan migrate

      - name: Show dir
        run: pwd
        
      - name: PHP Version
        run: php --version

      - name: Install Passport keys
        run: php artisan passport:keys --force

      - name: Create Password Client
        run: php artisan passport:client --password --name=Client1 --provider=users

      # Code quality
      - name: Execute tests (Unit and Feature tests)
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: stripe_api
          DB_PORT: 33306
          DB_USER: root
          DB_PASSWORD: password

        #run: vendor/bin/phpunit --coverage-html reports/
        # use this command to display coverage report in CI actions
        run: php artisan test --coverage

      - uses: symfonycorp/security-checker-action@v5

      - name: Execute Code Sniffer via phpcs
        run: |
          composer require --dev squizlabs/php_codesniffer
          vendor/bin/phpcs --config-set show_warnings 0
          vendor/bin/phpcs --standard=PSR12 app

      - name: Execute Code Static Analysis (PHP Stan + Larastan)
        run: |
          composer require --dev larastan/larastan
          vendor/bin/phpstan analyse --error-format=github -c phpstan.neon --no-progress

      - name: Run Fresh migration and seed the data
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: explearn
          DB_PORT: 33306
          DB_USER: root
          DB_PASSWORD: password
        run: php artisan migrate:fresh --seed
